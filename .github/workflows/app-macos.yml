name: Mac

on:
  push:
    branches:
      - main
      # PR branches that alter the build process should be prefixed with `build/`, so
      # that this workflow runs.
      - 'build/**'
  workflow_call:
  workflow_dispatch:

jobs:
  php:
    name: PHP
    uses: ./.github/workflows/php-macos.yml

  app:
    name: App
    strategy:
      matrix:
        os:
          - macos-13  # x64
          - macos-14  # arm64
    runs-on: ${{ matrix.os }}
    needs:
      - php
    steps:
      - uses: actions/checkout@v4

      # Set up the code signing certificate. This was copied from the example in
      # https://docs.github.com/en/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development.
      - name: Set up code signing
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Set up some useful variables.
          CERTIFICATE_PATH=$RUNNER_TEMP/build.p12
          PROVISION_PROFILE_PATH=$RUNNER_TEMP/build.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import the signing certificate and provisioning profile from our secrets.
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PROVISION_PROFILE_PATH

          # Create a temporary keychain which will hold the signing certificate.
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Add the certificate to the keychain.
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply the provisioning profile.
          # This path is based on what I found at https://stackoverflow.com/questions/45625347/xcode-provisioning-profiles-location#45642752
          mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
          cp $PROVISION_PROFILE_PATH ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          tools: composer

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Set up Yarn
        run: |
          corepack enable
          yarn set version berry

# Dependency caching is temporarily disabled due to https://github.com/npm/cli/issues/4828.
#      - name: Cache dependencies
#        id: cache
#        uses: actions/cache@v4
#        with:
#          path: node_modules
#          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
#        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: Download PHP interpreter
        uses: actions/download-artifact@v4
        with:
          artifact-ids: {{ needs.php.outputs.artifact-id }}

      # Only notarize tagged releases; Electron Builder skips notarization if
      # these environment variables are undefined.
      - name: Enable notarization for tagged release
        run: |
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/')

      - name: Create application bundle
        run: |
          mkdir -p bin
          chmod +x php
          mv php bin
          cd bin
          cp $(which composer) composer.phar
          phar extract -f composer.phar ./composer
          rm composer.phar
          curl https://curl.haxx.se/ca/cacert.pem --fail --location --output cacert.pem
          yarn run build
          yarn run make

      - name: Delete PHP interpreter artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: php-macos

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: app-mac-${{ runner.arch }}
          path: './dist/*.dmg'
          # The DMG is already compressed.
          compression-level: 0
          overwrite: true
